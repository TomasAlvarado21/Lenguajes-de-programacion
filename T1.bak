#lang play
(deftype TaskSchedule
  [task name duration]
  [seq t1 t2]
  [par t1 t2]);


(define (is-in schedule name)
  (match schedule
    [(task n1 duration) (equal? n1 name) ]
    [(seq t1 t2) (or (is-in t1 name) (is-in t2 name))]
    [(par t1 t2) (or (is-in t1 name) (is-in t2 name))]
    ))


(define (length schedule)
  (match schedule
    [(task name duration) duration]
    [(seq t1 t2) (+ (length t1) (length t2))]
    [(par t1 t2) (max (length t1) (length t2))]
    ))



(define (longest schedule)
  (match schedule
    [(task name duration) (cons name duration)]
    [(seq t1 t2) (if (> (cdr(longest t1)) (cdr(longest t2))) (longest t1) (longest t2))]
    [(par t1 t2) (if (> (cdr(longest t1)) (cdr(longest t2))) (longest t1) (longest t2))]
    ))



#|
(define (sequest schedule)
  (match schedule
    [(task name duration) duration]
    [(seq t1 t2)]))

(define (end-time-aux schedule name)
  (match schedule
    [(task _ duration) duration]
    [(seq t1 t2) (+ (end-time-aux t1 name) (end-time-aux t2 name))]
    [(par t1 t2) 

(define (end-time schedule name) (if (is-in schedule name) (end-time-aux schedule name) (error "tarea no encontrada")))
|#


(define (fold tfun sfun pfun)
  (Î» (schedule)
    (match schedule
    [(task name duration) (tfun name duration)]
    [(seq t1 t2) (sfun ((fold tfun sfun pfun) t1) ((fold tfun sfun pfun) t2))]
    [(par t1 t2) (pfun ((fold tfun sfun pfun) t1) ((fold tfun sfun pfun) t2))])))

(define (obtain-duration n d) d)

;; (define is-in2 (fold equal? (or) (or)))
  
(define length2 (fold obtain-duration  + max))

